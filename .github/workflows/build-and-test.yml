name: Build and Test
# Builds preCICE inside various docker containers and runs the tests.
# Ubuntu-based cases additionally build the Debian package and test it using lintian.
# The debug builds of Ubuntu 18.04 LTS are additionally used for code coverage.
#
# See https://github.com/precice/ci-images
on:
  push:
    branches:
      - main
      - develop
  pull_request:
    paths:
      - 'cmake/**'
      - 'examples/**'
      - 'src/**'
      - 'tests/**'
      - 'thirdparty/**'
      - 'tests/**'
      - 'CMakeLists.txt'
      - 'extras/bindings/**'
      - '.github/workflows/build-and-test.yml'
  workflow_dispatch:

concurrency:
  group: ${ {github.event_name }}-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{github.event_name == 'pull_request'}}

jobs:
  build:
    name: ${{ format('{0} {1} {2} {3}', matrix.IMAGE, matrix.CXX, matrix.CONFIG, matrix.TYPE) }}
    runs-on: ubuntu-latest
    container: 'precice/ci-${{ matrix.IMAGE }}:latest'
    defaults:
      run:
        shell: "bash --login -eo pipefail {0}"
    strategy:
      fail-fast: false
      matrix:
        include:
          - IMAGE: 'ubuntu-2004'
            CONFIG: Bare
            CXX: 'g++'
            TYPE: Debug
            COVFLAGS: '--coverage'
          - IMAGE: 'ubuntu-2004'
            CONFIG: MPI
            CXX: 'g++'
            TYPE: Debug
            COVFLAGS: '--coverage'
          - IMAGE: 'ubuntu-2004'
            CONFIG: MPIPETSc
            CXX: 'g++'
            TYPE: Debug
            COVFLAGS: '--coverage'
          - IMAGE: 'ubuntu-2004'
            CONFIG: Bare
            CXX: 'g++'
            TYPE: Release
          - IMAGE: 'ubuntu-2004'
            CONFIG: MPI
            CXX: 'g++'
            TYPE: Release
          - IMAGE: 'ubuntu-2004'
            CONFIG: MPIPETSc
            CXX: 'g++'
            TYPE: Release
          - IMAGE: 'ubuntu-2204'
            CONFIG: MPIPETSc
            CXX: 'g++'
            TYPE: Debug
          - IMAGE: 'archlinux'
            CONFIG: MPIPETSc
            CXX: 'g++'
            TYPE: Debug
          - IMAGE: 'archlinux'
            CONFIG: MPIPETSc
            CXX: 'g++'
            TYPE: Release
          - IMAGE: 'archlinux'
            CONFIG: MPIPETSc
            CXX: 'clang++'
            TYPE: Debug
          - IMAGE: 'archlinux'
            CONFIG: MPIPETSc
            CXX: 'clang++'
            TYPE: Release
          - IMAGE: 'fedora'
            CONFIG: MPIPETSc
            CXX: 'g++'
            TYPE: Debug
          - IMAGE: 'fedora'
            CONFIG: MPIPETSc
            CXX: 'g++'
            TYPE: Release
    env:
      CCACHE_DIR: "$GITHUB_WORKSPACE/ccache"
      OMPI_MCA_rmaps_base_oversubscribe: 1
    steps:
      - name: Restore ccache
        uses: actions/cache@v3
        with:
          path: ccache
          key: precice-ccache-${{ runner.IMAGE }}-${{ matrix.CONFIG }}-${{ matrix.CXX }}-${{ matrix.TYPE }}
      - uses: actions/checkout@v3
      - name: Generate build directory
        run: mkdir -p build
      - name: Configure
        working-directory: build
        env:
          CXX: ${{ matrix.CXX }}
          CXXFLAGS: "-Wall -Wextra -Wno-unused-parameter ${{ matrix.COVFLAGS }}"
          MPI: ${{ contains(matrix.CONFIG, 'MPI') }}
          PETSc: ${{ contains(matrix.CONFIG, 'PETSc') }}
        run: |
          cmake --version
          cmake -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_BUILD_TYPE=${{ matrix.TYPE }} -DPRECICE_MPICommunication=${{ env.MPI }} -DPRECICE_PETScMapping=${{ env.PETSc }} -DPRECICE_ENABLE_BENCHMARKS=ON -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_EXE_LINKER_FLAGS="${{ matrix.COVFLAGS }}" -DCMAKE_EXPORT_COMPILE_COMMANDS=ON ..
      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: ${{ format('{0} {1} {2} {3}', matrix.IMAGE, matrix.CXX, matrix.CONFIG, matrix.TYPE) }} CMakeCache
          path: build/CMakeCache.txt
      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: ${{ format('{0} {1} {2} {3}', matrix.IMAGE, matrix.CXX, matrix.CONFIG, matrix.TYPE) }} CMakeLogs
          path: 'build/CMakeFiles/*.log'
      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: ${{ format('{0} {1} {2} {3}', matrix.IMAGE, matrix.CXX, matrix.CONFIG, matrix.TYPE) }} CompileCommands
          path: build/compile_commands.json
      - name: Enable compiler annotations
        uses: electronjoe/gcc-problem-matcher@v1
        if: ${{ matrix.IMAGE == 'archlinux' }}
      - name: Compile
        working-directory: build
        run: |
          make -j $(nproc)
      - name: Adjust user rights
        run: chown -R $PRECICE_USER build
      - name: Tests
        env:
          CTEST_OUTPUT_ON_FAILURE: 1
          BOOST_TEST_LOG_LEVEL: all
        working-directory: build
        run: su -c "ctest" $PRECICE_USER
      - name: Coverage Report
        working-directory: build
        if: ${{ matrix.COVFLAGS }}
        run: |
          lcov --capture --directory . --output-file coverage.info
          lcov --remove coverage.info '/usr/*' "/opt/*" --output-file coverage.info # filter system-files and local-dependencies
      - uses: codecov/codecov-action@v3
        with:
          files: ./build/coverage.info
        if: ${{ matrix.COVFLAGS }}
      - name: Check packages
        working-directory: build
        if: ${{ contains(matrix.IMAGE, 'ubuntu') }}
        run: |
          cpack
          lintian -i --suppress-tags control-file-has-bad-permissions *.deb
      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: ${{ format('{0} {1} {2} {3}', matrix.IMAGE, matrix.CXX, matrix.CONFIG, matrix.TYPE) }} TestOutput
          path: build/TestOutput/
